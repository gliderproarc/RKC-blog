#+STARTUP: content
#+AUTHOR: Robert Clay
#+HUGO_BASE_DIR: .
#+HUGO_AUTO_SET_LASTMOD: t
* Pages
  :PROPERTIES:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
  :EXPORT_HUGO_MENU: :menu main
  :EXPORT_HUGO_SECTION: pages
  :EXPORT_HUGO_WEIGHT: auto
  :END:
** Main page
   :PROPERTIES:
   :EXPORT_FILE_NAME: page-title
   :END:
   This will be on of the pages separate from the blog posts. It will be longer.

* Posts
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:
** Topic                                                             :@topic:
*** TODO Post Title                                               :post:tags:
    :PROPERTIES:
    :EXPORT_DATE: 2017-12-19
    :EXPORT_FILE_NAME: post-title-in-slug-form
    :END:

    - State "TODO"       from "DONE"       [2020-12-15 Tue 22:31]
    Content

    More Content

    #+BEGIN_SRC bash -l 7 :hl_lines 8
      echo 'Some source code content'
      echo 'This line will be highlighted'
      echo "This one won't"
    #+END_SRC

**** Post Sub-Heading
     This is another section within the post.

*** TODO Draft Post Title
    :PROPERTIES:
    :EXPORT_FILE_NAME: draft-post-title
    :END:

    This article *will* be exported but will be marked ~draft = true~ in the front matter.

*** DONE First post
    :PROPERTIES:
    :EXPORT_FILE_NAME: bobby-test-post
    :EXPORT_DATE: 2020-12-13
    :END:
   [2020-12-15 Tue], #first_post
   
   This is the first of many posts to come. I had never considered my self a
   blogger type, but I have been learning some things recently and I feel like a
   blog is a great way to share what I have been learning in an ...oddly
   old fashioned manner. This past year I went from using Google docs to keep
   notes at work, to today finding myself unwilling to use anything less than
   Emacs and Org mode for a surprising amount of my day to day note taking and
   organization. It was a lot to learn, but the journey was worth it, and I hope
   to share not just what I have been learning about this past year (2020 was
   one for the record books in more ways than one), but I haven't really felt
   like I had a place to tell my story until now.

   These days all the young kids in Japan want to grow up and be a YouTuber.
   YouTube is a fascinating medium, and the amount of things you can learn and
   see there is staggering. But I have found myself gravitating to text these
   days and hope that a simple presentation can provide some counterpoint to the
   rest of the world that seems to be happily consuming ever increasing amounts
   of loud, noisy, colorful, and occasionally obnoxious video content in various
   forms.

   ...wow, I started off this blog with a little "get off my lawn" soap-box
   speech. This is going to be interesting. 
   
*** DONE What this Blog runs on
    :PROPERTIES:
    :EXPORT_FILE_NAME: what-this-blog-runs-on
    :EXPORT_DATE: 2020-12-16
    :END:
    [2020-12-16 Wed], #Emacs 
    This blog looks very simple on the surface, but what it is built on is
    something I am particularly happy with, and it will introduce a few themes
    and topics that I will write about more in the future. 

    Here is the loose chain of software and tech between my posts and the
    internet:
    - Emacs and org-mode
    - ox-hugo
    - Hugo static site generation
    - .git file for version control
    - Hosting of that .git file on Github
    - Github api calls to Netlify that runs a CI routine to build the site push
      it to the web.

      The fact I was just learning what Emacs was a year ago still makes me wish
      I had tried to learn all of this sooner. The number of powerful tools out
      there for people willing to learn them is incredible. And if I had learned
      how to use all this sooner, I wonder what I might have made when I was
      younger with more time on my hands.. lol.

      Just Emacs and Git have been a journey to learn, but now I have so much
      respect for what they can do as tools and how they let me do my work. And
      of all the things I could say about them I think I am most interested in
      talking about text files.
     
**** Text files? 
     Yeah, text files. You know, on your computer when you have a file that ends
     in .txt. That is a text files. Text files are awesome. I didn't think they
     were all that interesting until I learned what happened to files on a
     computer that are 10+ years old.

     I had a few laptops over the years, and I had never really given back-ups
     much thought because I am (was?) an Apple guy. I just turned on time-machine and
     called it a day. But these days when I try to get at **really** old files,
     I find a lot of those files don't open anymore. The data is there, but I
     can't use the program that made it. So even though I backed it up, the
     backup is useless. I still can't get at what I made. But do you know what I
     can still open? I had a diary app that let me do an export of my entire
     list of entries as an .rtf or rich text file. These files I can open, and
     they read just fine. That is because the .rtf file format is a widely
     adopted standard that lots of program can read and write to. But all my
     program that stored their information in proprietary formats are mostly
     useless now.

     So when I got to thinking about making this blog, I decided to make it here
     with a Hugo back-end. Hugo is a static site generation frame work built on
     Go, and while I don't know enough Go to be able to build it my self, have
     access to most the inner working of this site is really quite fun and
     interesting. To make a post, I just make a mark-down file, put it in the
     right spot in my file structure and I have a new blog post. I'll talk about
     Git and Emacs another day, but Org mode deserves some special mention.


    
**** Org mode

     Org mode is it's own markup language specific to Emacs and has a lot of
     support built into it for the lisp code (or elisp rather) it is built with.
     I have had to learn a bit of lisp, but as far as programming languages go I
     think it's not nearly as troublesome as languages like Javascript, but I
     digress. Suffice to say Org is a markup language, but at the end of the day
     it's also just text files. Meaning even if I needed to move away from Emacs
     and Org mode one day, all the words in my blog and notes will all be just a
     bunch of copy and paste of text to move somewhere else.

    ---
    I would not recommend this platform to everyone. The amount of reading I had
    to do to get it up and running was pretty substantial. And if you are
    thinking of making a blog I am sure tools and platforms like Word-press are
    much more approachable. But I really like what Hugo and Netlify and Emacs
    have afforded me here. I save an Org file and commit to a Git repository and
    I have posted a blog post. To me... that is the kind of powerful simplicity
    I want to use.

    
*** DONE Org mode introduction
    :PROPERTIES:
    :EXPORT_FILE_NAME: org-mode-introduction
    :EXPORT_DATE: 2020-12-17
    :END:
    [2020-12-17 Thu],#Org-mode
    
    This topic deserves more than a post or two, but a nice short introduction to
  what it is and how it works might help you understand why I have come to rely
  on Org mode for most of my note taking and task tracking needs.

    https://orgmode.org/manual/

    Let me start with why I went looking for and found Org mode. I was making
  really complicated spreadsheets at work. I was trying to program in a
  spreadsheet, and even convinced my company to get adopt a no-code tool. It was
  great. Lots of the power I wanted from a program but with the flexibility of a
  spreadsheet. I was so happy using it, I wondered it if might be nice to try
  and use it for my personal data management, and then I ran into a problem

**** It cost a monthly subscription fee
     Not that a monthly fee is all bad. The excellent company who made the
     software need to make money too. But I could not afford to be paying a
     monthly fee for software that I could do more or less with what I
     already had. I was much more interested in spending money on music
     software. 
   
     So I went online and started looking for software. I found a few text
     editors that did some of what I wanted, I tired Atom and thought it was
     pretty cool. But what I really wanted was something that would:
     - Tie in data in a spreadsheet with my words in my notes
     - Help me make notes, tasks, and track appointments without needing to use
       something like Google calendars
     - Approach code in terms of flexibility and let me make tools for what ever
       else I wanted it to do for me.

     


**** I don't remember the forum where someone suggested Org-mode, but I will forever be grateful for the advice I got

     I was warned that Org was hard to get set up, but that once you had it
     working it would do all those things I was looking to do and more.

     So let me get into what Org mode is. It's a "mode" for a  text editor
     called Emacs, and it's a markup language that has a few extra
     functionalities. Once of them is tables. While HTML tables are notoriously
     hard to type, format, and work with, Org mode makes them very easy and even
     provides most of what you would expect from a basic spreadsheet
     application... with one **very** big difference. Org mode also provides
     facilities for literate programming, meaning you can have cells in you
     spreadsheet that don't have to use the less than ideal "language" of
     spreadsheet formulas. You can write a Python function and have the result
     fill out into a column in your table. Something like this:

  `#+TBLNAME: data_for_testing`
  
  `| number | Python |`
  
  `|--------+--------|`
  
  `|      1 |      2 |`
  
  `|      2 |      3 |`
  
  `|      3 |      4 |`
  
  `|      4 |      5 |`
  
  `#+TBLFM: $1='(org-sbe "Add_1_to_me" (num $1))`
  
  
`#+name:Add_1_to_me`

`#+begin_src python :python python3 :var num=1`

`return(num+1)`

`#+end_src`


     Now any spreadsheet can add a number to the next cell's value, but the fact
     it can be written in a programming language as simple and powerful as
     python is one of the things that keeps me from looking anywhere else to do
     this sort of thing.

     I'll touch on the way the Python code is represented there later. Let me
     keep going on what I originally needed Org to do for me. I also wanted a
     way to write and keep notes. I had used Atom basic .md files, but Org did
     more than just give me a way to write notes. Because it is implemented in a
     Lisp interpreter, there are many things you can ask code to do for you
     based on what you write in your notes. Things like a special syntax to make
     something a "task" or a special syntax to make things a date which can be
     recognized else where to place notes and tasks relative to each other like
     a planner, it's really quite amazing how many things are in this software.
     And what really struck me was that fact it was basically all plain text
     and lisp code.

     I've mentioned lisp and code a few times, and while my intention was not to
     learn how to write code when I started using Org mode, I decided to try a
     little bit here and there and found that it wasn't as bad as the last time
     I had tried my hand at coding, and the "literate programming" style of
     writing prose with bits of code interspersed around the file was really
     nice. So I am teaching my slef a few languages, and one of them is elisp.

    #+name:exmaple-code
    #+begin_src elisp
(cdr '(a b c d))
    #+end_src 

    #+RESULTS: exmaple-code
    | b | c | d |

    I won't bore you with a lisp tutorial, but suffice to say Org mode has made
    writing little bits of code that work together with words really easy. And
    surprisingly, you can mix languages. Because these blocks of code are
    independent in your document, you can define what they "see" from each other
    and string them together into a program with several languages in it. 

    My short introduction here hardly does the program justice, but if you want
    to know more, the link above can take you to the Org mode manual, which will
    tell most of what there is to know about it. If you are willing to learn how
    to use Emacs, Org mode is an amazing tool that made Emacs worth it for me.
    And after a while I started to find just how interesting Emacs it's self is
    too, but that is a topic for another day.

* Footnotes
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (auto-fill-mode 1)
# eval: (org-hugo-auto-export-mode)
# End:
